{
	"info": {
		"_postman_id": "6af90f54-32ac-4b30-972f-623cddc4445b",
		"name": "Serverless-ImageAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Post - Image",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Valid Response in Valid Time\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);",
							"});",
							"",
							"pm.test(\"Check for Valid Response\", function () {",
							"     pm.response.to.have.status(200);",
							"     pm.response.to.have.header(\"Content-Type\");",
							"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"image/png\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{API_KEY}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"image\":\"\",\n    \"scaletype\": \"BICUBIC\",\n    \"width\":400,\n    \"height\":400\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{SERVERLESS_URL}}",
					"host": [
						"{{SERVERLESS_URL}}"
					]
				},
				"description": "Post Image"
			},
			"response": []
		},
		{
			"name": "Get - Images",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Valid Response in Valid Time\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);",
							"});",
							"",
							"pm.test(\"Check for Valid Response\", function () {",
							"     pm.response.to.have.status(200);",
							"     pm.response.to.have.header(\"Content-Type\");",
							"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
							"     pm.expect(pm.response.json().images).not.to.be.null; ",
							"     pm.expect(pm.response.json().images.length).not.to.be.below(1);",
							"     pm.expect(pm.response.json().images[0]).not.to.be.null; ",
							"     pm.expect(pm.response.json().images[0].id).not.to.be.null; ",
							"     pm.environment.set(\"ID\", pm.response.json().images[0].id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{API_KEY}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{SERVERLESS_URL}}",
					"host": [
						"{{SERVERLESS_URL}}"
					]
				},
				"description": "Post Image"
			},
			"response": []
		},
		{
			"name": "Options - Images",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Valid Response in Valid Time\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);",
							"});",
							"",
							"pm.test(\"Check for Valid Response\", function () {",
							"     pm.response.to.have.status(200);",
							"     pm.response.to.have.header(\"Content-Type\");",
							"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
							"     pm.expect(pm.response.json().images).not.to.be.null; ",
							"     pm.expect(pm.response.json().images.length).not.to.be.below(1);",
							"     pm.expect(pm.response.json().images[0]).not.to.be.null; ",
							"     pm.expect(pm.response.json().images[0].id).not.to.be.null; ",
							"     pm.environment.set(\"ID\", pm.response.json().images[0].id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "OPTIONS",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{SERVERLESS_URL}}",
					"host": [
						"{{SERVERLESS_URL}}"
					]
				},
				"description": "Post Image"
			},
			"response": []
		},
		{
			"name": "Get - Image ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Valid Response in Valid Time\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);",
							"});",
							"",
							"pm.test(\"Check for Valid Response\", function () {",
							"     pm.response.to.have.status(200);",
							"     pm.response.to.have.header(\"Content-Type\");",
							"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
							"     pm.expect(pm.response.json().id).to.be.eql(pm.environment.get(\"ID\"))",
							"     pm.environment.set(\"ID\", pm.response.json().id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{API_KEY}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{SERVERLESS_URL}}/{{ID}}",
					"host": [
						"{{SERVERLESS_URL}}"
					],
					"path": [
						"{{ID}}"
					]
				},
				"description": "Post Image"
			},
			"response": []
		},
		{
			"name": "Optiona - Image ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Valid Response in Valid Time\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);",
							"});",
							"",
							"pm.test(\"Check for Valid Response\", function () {",
							"     pm.response.to.have.status(200);",
							"     pm.response.to.have.header(\"Content-Type\");",
							"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
							"     pm.expect(pm.response.json().id).to.be.eql(pm.environment.get(\"ID\"))",
							"     pm.environment.set(\"ID\", pm.response.json().id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{SERVERLESS_URL}}/{{ID}}",
					"host": [
						"{{SERVERLESS_URL}}"
					],
					"path": [
						"{{ID}}"
					]
				},
				"description": "Post Image"
			},
			"response": []
		},
		{
			"name": "Delete - Image ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Valid Response in Valid Time\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);",
							"});",
							"",
							"pm.test(\"Check for Valid Response\", function () {",
							"     pm.response.to.have.status(200);",
							"     pm.response.to.have.header(\"Content-Type\");",
							"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
							"     pm.expect(pm.response.json().id).to.be.eql(pm.environment.get(\"ID\"))",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{SERVERLESS_URL}}/{{ID}}",
					"host": [
						"{{SERVERLESS_URL}}"
					],
					"path": [
						"{{ID}}"
					]
				},
				"description": "Post Image"
			},
			"response": []
		}
	]
}